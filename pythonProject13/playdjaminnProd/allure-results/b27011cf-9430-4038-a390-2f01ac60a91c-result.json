{"name": "test_registration_test", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //p[text()='You don't have any cars in your garage'] because of the following error:\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '//p[text()='You don't have any cars in your garage']' is not a valid XPath expression.\n  (Session info: chrome=117.0.5938.92); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n0   chromedriver                        0x0000000100b9ad98 chromedriver + 4337048\n1   chromedriver                        0x0000000100b92e14 chromedriver + 4304404\n2   chromedriver                        0x00000001007bfa5c chromedriver + 293468\n3   chromedriver                        0x00000001007c4cc8 chromedriver + 314568\n4   chromedriver                        0x00000001007c68dc chromedriver + 321756\n5   chromedriver                        0x00000001007c6a08 chromedriver + 322056\n6   chromedriver                        0x0000000100804af4 chromedriver + 576244\n7   chromedriver                        0x000000010083f908 chromedriver + 817416\n8   chromedriver                        0x00000001007f8a5c chromedriver + 526940\n9   chromedriver                        0x00000001007f9908 chromedriver + 530696\n10  chromedriver                        0x0000000100b60de4 chromedriver + 4099556\n11  chromedriver                        0x0000000100b652a0 chromedriver + 4117152\n12  chromedriver                        0x0000000100b6b52c chromedriver + 4142380\n13  chromedriver                        0x0000000100b65da0 chromedriver + 4119968\n14  chromedriver                        0x0000000100b3da74 chromedriver + 3955316\n15  chromedriver                        0x0000000100b82a48 chromedriver + 4237896\n16  chromedriver                        0x0000000100b82bc4 chromedriver + 4238276\n17  chromedriver                        0x0000000100b92a8c chromedriver + 4303500\n18  libsystem_pthread.dylib             0x0000000194a3ffa8 _pthread_start + 148\n19  libsystem_pthread.dylib             0x0000000194a3ada0 thread_start + 8", "trace": "self = <test_registration.TestRegistration object at 0x102f99490>\n\n    @allure.feature(\"Beautiful test\")\n    def test_registration_test(self):\n        self._driver.implicitly_wait(3)\n        self._driver.get(\"https://guest:welcome2qauto@qauto2.forstudy.space/\")\n    \n        sign_up_button = self._driver.find_element(By.XPATH, \"//button[text()='Sign up']\")\n        sign_up_button.click()\n    \n        name_input = self._driver.find_element(By.ID, \"signupName\")\n        name_input.send_keys(\"Tester\")\n    \n        last_name_input = self._driver.find_element(By.ID, \"signupLastName\")\n        last_name_input.send_keys(\"testLastName\")\n    \n        email_input = self._driver.find_element(By.ID, \"signupEmail\")\n        email_input.send_keys(self.user_email)\n    \n        password_input = self._driver.find_element(By.ID, \"signupPassword\")\n        password_input.send_keys(self.user_password)\n    \n        repeat_password_input = self._driver.find_element(By.ID, \"signupRepeatPassword\")\n        repeat_password_input.send_keys(self.user_password)\n    \n        register_button = self._driver.find_element(By.XPATH, \"//button[text()='Register']\")\n        register_button.click()\n    \n>       empty_garage = self._driver.find_elements(By.XPATH, \"//p[text()='You don't have any cars in your garage']\")\n\ntest_registration.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:768: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\"using\": by, \"value\": value})[\"value\"] or []\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x102958750>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: Unable to locate an elemen...000194a3ffa8 _pthread_start + 148\\\\n19  libsystem_pthread.dylib             0x0000000194a3ada0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression //p[text()='You don't have any cars in your garage'] because of the following error:\nE       SyntaxError: Failed to execute 'evaluate' on 'Document': The string '//p[text()='You don't have any cars in your garage']' is not a valid XPath expression.\nE         (Session info: chrome=117.0.5938.92); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100b9ad98 chromedriver + 4337048\nE       1   chromedriver                        0x0000000100b92e14 chromedriver + 4304404\nE       2   chromedriver                        0x00000001007bfa5c chromedriver + 293468\nE       3   chromedriver                        0x00000001007c4cc8 chromedriver + 314568\nE       4   chromedriver                        0x00000001007c68dc chromedriver + 321756\nE       5   chromedriver                        0x00000001007c6a08 chromedriver + 322056\nE       6   chromedriver                        0x0000000100804af4 chromedriver + 576244\nE       7   chromedriver                        0x000000010083f908 chromedriver + 817416\nE       8   chromedriver                        0x00000001007f8a5c chromedriver + 526940\nE       9   chromedriver                        0x00000001007f9908 chromedriver + 530696\nE       10  chromedriver                        0x0000000100b60de4 chromedriver + 4099556\nE       11  chromedriver                        0x0000000100b652a0 chromedriver + 4117152\nE       12  chromedriver                        0x0000000100b6b52c chromedriver + 4142380\nE       13  chromedriver                        0x0000000100b65da0 chromedriver + 4119968\nE       14  chromedriver                        0x0000000100b3da74 chromedriver + 3955316\nE       15  chromedriver                        0x0000000100b82a48 chromedriver + 4237896\nE       16  chromedriver                        0x0000000100b82bc4 chromedriver + 4238276\nE       17  chromedriver                        0x0000000100b92a8c chromedriver + 4303500\nE       18  libsystem_pthread.dylib             0x0000000194a3ffa8 _pthread_start + 148\nE       19  libsystem_pthread.dylib             0x0000000194a3ada0 thread_start + 8\n\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidSelectorException"}, "attachments": [{"name": "stdout", "source": "a9f77f45-860a-420b-ad71-3f46a66e64dd-attachment.txt", "type": "text/plain"}], "start": 1695918480693, "stop": 1695918483008, "uuid": "90d6ea8a-e623-4c7e-ad06-ada7ea436c37", "historyId": "49fa25d70dfe378f1a5fc4b9b06b83a6", "testCaseId": "49fa25d70dfe378f1a5fc4b9b06b83a6", "fullName": "test_registration.TestRegistration#test_registration_test", "labels": [{"name": "feature", "value": "Beautiful test"}, {"name": "suite", "value": "test_registration"}, {"name": "subSuite", "value": "TestRegistration"}, {"name": "host", "value": "Jivan-Air"}, {"name": "thread", "value": "14149-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_registration"}]}